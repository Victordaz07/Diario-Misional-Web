rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.token.email_verified == true;
    }
    
    function isViewer() {
      return isAuthenticated() && 
             request.auth.token.viewer == true;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             request.auth.token.admin == true;
    }

    // User profiles - only owner can read/write
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Diary entries - only owner can read/write
    match /diaryEntries/{entryId} {
      allow read, write: if isValidUser() && 
                            isOwner(resource.data.userId);
      allow create: if isValidUser() && 
                       isOwner(request.resource.data.userId);
    }

    // Transfers - only owner can read/write
    match /transfers/{transferId} {
      allow read, write: if isValidUser() && 
                            isOwner(resource.data.userId);
      allow create: if isValidUser() && 
                       isOwner(request.resource.data.userId);
    }

    // Photos - only owner can read/write
    match /photos/{photoId} {
      allow read, write: if isValidUser() && 
                            isOwner(resource.data.userId);
      allow create: if isValidUser() && 
                       isOwner(request.resource.data.userId);
    }

    // People (investigators) - only owner can read/write
    match /people/{personId} {
      allow read, write: if isValidUser() && 
                            isOwner(resource.data.userId);
      allow create: if isValidUser() && 
                       isOwner(request.resource.data.userId);
    }

    // Resources - public read, admin write
    match /resources/{resourceId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Viewer invites - only owner can manage their invites
    match /viewerInvites/{inviteId} {
      allow read, write: if isValidUser() && 
                            isOwner(resource.data.missionaryId);
      allow create: if isValidUser() && 
                       isOwner(request.resource.data.missionaryId);
    }

    // Viewers - only owner and invited viewer can read
    match /viewers/{viewerId} {
      allow read: if isValidUser() && 
                     (isOwner(resource.data.missionaryId) || 
                      isOwner(resource.data.userId));
      allow write: if isValidUser() && 
                      isOwner(resource.data.missionaryId);
      allow create: if isValidUser() && 
                       isOwner(request.resource.data.missionaryId);
    }

    // Shared feed - viewers can read, owner can write
    match /sharedFeed/{feedId} {
      allow read: if isValidUser() && 
                     (isOwner(resource.data.missionaryId) || 
                      isViewer());
      allow write: if isValidUser() && 
                      isOwner(resource.data.missionaryId);
      allow create: if isValidUser() && 
                       isOwner(request.resource.data.missionaryId);
    }

    // Donations - only owner and viewer can read
    match /donations/{donationId} {
      allow read: if isValidUser() && 
                     (isOwner(resource.data.missionaryId) || 
                      isOwner(resource.data.viewerId));
      allow create: if isValidUser();
    }

    // Sponsorship plans - public read, admin write
    match /sponsorshipPlans/{planId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Impact reports - only owner and viewers can read
    match /impactReports/{reportId} {
      allow read: if isValidUser() && 
                     (isOwner(resource.data.missionaryId) || 
                      isViewer());
      allow write: if isValidUser() && 
                      isOwner(resource.data.missionaryId);
      allow create: if isValidUser() && 
                       isOwner(request.resource.data.missionaryId);
    }

    // User settings - only owner can read/write
    match /userSettings/{settingId} {
      allow read, write: if isValidUser() && 
                            isOwner(resource.data.userId);
      allow create: if isValidUser() && 
                       isOwner(request.resource.data.userId);
    }

    // Analytics - only admin can read/write
    match /analytics/{analyticsId} {
      allow read, write: if isAdmin();
    }

    // Notifications - only owner can read/write
    match /notifications/{notificationId} {
      allow read, write: if isValidUser() && 
                            isOwner(resource.data.userId);
      allow create: if isValidUser() && 
                       isOwner(request.resource.data.userId);
    }

    // Mission stats - only owner can read/write
    match /missionStats/{statsId} {
      allow read, write: if isValidUser() && 
                            isOwner(resource.data.userId);
      allow create: if isValidUser() && 
                       isOwner(request.resource.data.userId);
    }

    // Recent activities - only owner can read/write
    match /recentActivities/{activityId} {
      allow read, write: if isValidUser() && 
                            isOwner(resource.data.userId);
      allow create: if isValidUser() && 
                       isOwner(request.resource.data.userId);
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}